[{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"I\u0026rsquo;ve developed a neat little kinda complex system for assigning isolated vms on my homelab their own public ip address, so I thought I\u0026rsquo;d share it for some feedback.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eI\u0026rsquo;ve developed a neat little kinda complex system for assigning isolated vms on my homelab their own public ip address, so I thought I\u0026rsquo;d share it for some feedback.\u003c/p\u003e","title":"How I run a mini vps hosting service out of my homelab"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"I\u0026rsquo;ve developed a neat little kinda complex system for assigning isolated vms on my homelab their own public ip address, so I thought I\u0026rsquo;d share it for some feedback.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eI\u0026rsquo;ve developed a neat little kinda complex system for assigning isolated vms on my homelab their own public ip address, so I thought I\u0026rsquo;d share it for some feedback.\u003c/p\u003e","title":"How I host VMs for friends"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"I\u0026rsquo;ve developed a neat little kinda complex system for assigning isolated vms on my homelab their own public ip address, so I thought I\u0026rsquo;d share it for some feedback.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eI\u0026rsquo;ve developed a neat little kinda complex system for assigning isolated vms on my homelab their own public ip address, so I thought I\u0026rsquo;d share it for some feedback.\u003c/p\u003e","title":"How I host VPS servers for friends"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"I\u0026rsquo;ve developed a neat little kinda complex system for assigning isolated vms on my homelab their own public ip address, so I thought I\u0026rsquo;d share it for some feedback.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eI\u0026rsquo;ve developed a neat little kinda complex system for assigning isolated vms on my homelab their own public ip address, so I thought I\u0026rsquo;d share it for some feedback.\u003c/p\u003e","title":"How I host VPS servers for friends \u0026 people I know"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"I\u0026rsquo;ve developed a neat little kinda complex system for assigning isolated vms on my homelab their own public ip address, so I thought I\u0026rsquo;d share it for some feedback.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eI\u0026rsquo;ve developed a neat little kinda complex system for assigning isolated vms on my homelab their own public ip address, so I thought I\u0026rsquo;d share it for some feedback.\u003c/p\u003e","title":"How I host VPS servers for friends"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"I\u0026rsquo;ve developed a neat little kinda complex system for assigning isolated vms on my homelab their own public ip address, so I thought I\u0026rsquo;d share it for some feedback.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eI\u0026rsquo;ve developed a neat little kinda complex system for assigning isolated vms on my homelab their own public ip address, so I thought I\u0026rsquo;d share it for some feedback.\u003c/p\u003e","title":"How I host VPS servers for friends"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"","permalink":"http://localhost:1313/posts/vps-service/","summary":"","title":"How I host VPS servers for friends"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I\u003c/p\u003e","title":"How I host VPS servers for friends"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people use those spare resources with their own linux virtual machine\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people use those spare resources with their own linux virtual machine\u003c/p\u003e","title":"How I host VPS servers for friends"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people use those spare resources with their own linux virtual machine, kinda like how google cloud offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people use those spare resources with their own linux virtual machine, kinda like how google cloud offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper\u003c/p\u003e","title":"How I host VPS servers for friends"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people use those spare resources with their own linux virtual machine, kinda like how google cloud offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it utilizes spare capapcity just sitting around.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people use those spare resources with their own linux virtual machine, kinda like how google cloud offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it utilizes spare capapcity just sitting around.\u003c/p\u003e","title":"How I host VPS servers for friends"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people use those spare resources with their own linux virtual machine, kinda like how google cloud offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people use those spare resources with their own linux virtual machine, kinda like how google cloud offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity\u003c/p\u003e","title":"How I host VPS servers for friends"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people use those spare resources with their own linux virtual machine, kinda like how google cloud offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people use those spare resources with their own linux virtual machine, kinda like how google cloud offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e","title":"How I host VPS servers for friends"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people use those spare resources with their own linux virtual machine, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people use those spare resources with their own linux virtual machine, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e","title":"How I host VPS servers for friends"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machiens , kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machiens , kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e","title":"How I host VPS servers for friends"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines , kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines , kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e","title":"How I host VPS servers for friends"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines , kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines , kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nI had a few requirements for security before\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eI had a few requirements for security before\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nI had a few requirements for security and freedom when running these servers:\nEach VM must run its own public ip address (So they can operate their own) ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eI had a few requirements for security and freedom when running these servers:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEach VM must run its own public ip address (So they can operate their own)\u003c/li\u003e\n\u003c/ul\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nI had a few requirements for security and freedom when running these servers:\nEach VM must have its own public ip address (So they can operate their own) ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eI had a few requirements for security and freedom when running these servers:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEach VM must have its own public ip address (So they can operate their own)\u003c/li\u003e\n\u003c/ul\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nI had a few requirements for security and freedom when running these servers:\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eI had a few requirements for security and freedom when running these servers:\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nI\u0026rsquo;ve built a robust system which lets me provide vms to friends where each vm gets its own public ip address,\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve built a robust system which lets me provide vms to friends where each vm gets its own public ip address,\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nI\u0026rsquo;ve built a robust system which lets me provide vms to friends where each vm gets its own public ip address, allocated resources, high quality internet\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve built a robust system which lets me provide vms to friends where each vm gets its own public ip address, allocated resources, high quality internet\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking\"\u003eNetworking\u003c/h3\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections here in Australia don\u0026rsquo;t let you\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections here in Australia don\u0026rsquo;t let you\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nEssentially,\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nWith the capacity I have available I can easily provide multiple vms with 1-2 threads, 1-2gb ram and 20-40gb nvme storage\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eWith the capacity I have available I can easily provide multiple vms with 1-2 threads, 1-2gb ram and 20-40gb nvme storage\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network,\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network and forwards ports from those ips to the private vm ips on my internal network.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network and forwards ports from those ips to the private vm ips on my home network.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network and forwards ports from those ips to the private vm ips on my home network.\nFor example if someone connected via ssh to [public_vps_ip]:22 It\u0026rsquo;d be relayed back into [private_vm_ip]\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network and forwards ports from those ips to the private vm ips on my home network.\nFor example if someone connected via ssh to [public_vps_ip]:22 It\u0026rsquo;d be relayed back into [private_vm_ip]:22\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network and forwards ports from those ips to the private vm ips on my home network.\nFor example if someone connected via ssh to [public_vps_ip]:22 It\u0026rsquo;d be relayed back into [private_vm_ip]:22, and it would all happen seemlessly\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network and forwards ports from those ips to the private vm ips on my home network.\nFor example if someone connected via ssh to [public_vps_ip]:22 It\u0026rsquo;d be relayed back into [private_vm_ip]:22, and it would all happen seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network and forwards ports from those ips to the private vm ips on my home network.\nFor example if someone connected via ssh to [public_vps_ip]:22 It\u0026rsquo;d be relayed back into [private_vm_ip]:22 through the tunnel and would all happen seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network.\nFor example if someone connected via ssh to [public_vps_ip]:22 It\u0026rsquo;d be relayed back into [private_vm_ip]:22 through the tunnel and would all happen seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network.\nIf someone onnected via ssh to [public_vps_ip]:22 It\u0026rsquo;d be relayed back into [private_vm_ip]:22 through the tunnel and would all happen seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network.\nIf someone connected via ssh to [public_vps_ip]:22 It\u0026rsquo;d be relayed back into [private_vm_ip]:22 through the tunnel and would all happen seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network.\nIf someone connected to [public_vps_ip]:22 It\u0026rsquo;d be relayed back into [private_vm_ip]:22 through the tunnel and would all happen seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and would all happen seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway located in my home network which exposes vm subnets.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway located in my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on each individual vm.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway located in my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on every vm.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway located in my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers for friends on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway located in my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host VPS servers on my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway located in my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway located in my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and you\u0026rsquo;d need legal\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway located in my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and you\u0026rsquo;d need legal\u003c/p\u003e\n\u003ch3 id=\"networking--public-ips\"\u003eNetworking \u0026amp; Public IPs\u003c/h3\u003e\n\u003cp\u003eI had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends and people I knwo\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway located in my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends and people I knwo\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends and people I know.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway located in my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends and people I know.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this, I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway located in my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway located in my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nVM Templates and Operating Systems ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nVM Templates and Operating Systems ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nVM Templates \u0026amp; Operating Systems ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nVM Templates \u0026amp; Operating Systems Since I use Proxmox VE for\nFirewalling off Internal Servers ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nVM Templates \u0026amp; Operating Systems Since I use Proxmox VE for\nFirewalling off my stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here, as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nVM Templates \u0026amp; Operating Systems Since I use Proxmox VE for\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nVM Templates \u0026amp; Operating Systems Since I use Proxmox VE for\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nVM Templates \u0026amp; Operating Systems Since I use Proxmox VE for\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nVM Templates \u0026amp; Operating Systems Since I use Proxmox VE for\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nVM Templates \u0026amp; Operating Systems Since I use Proxmox VE for\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nVM Templates \u0026amp; Operating Systems Since I use Proxmox VE for\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nVM Templates \u0026amp; Operating Systems Since I use Proxmox VE for\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nVM Templates \u0026amp; Operating Systems Since I use Proxmox VE for\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nVM Templates \u0026amp; Operating Systems Since I use Proxmox VE for\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems Since I use Proxmox VE for\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal VMs so I\u0026rsquo;m using the same hypervisor here for simplicity purposes\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal VMs so I\u0026rsquo;m using the same hypervisor here for simplicity and consistency\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal VMs so I\u0026rsquo;m using the same hypervisor here for simplicity and consistency.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal VMs so I\u0026rsquo;m using the same hypervisor here for simplicity and consistency. Currently I only have\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal VMs so I\u0026rsquo;m using the same hypervisor here for simplicity and consistency.\nCurrently I only have\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal VMs so I\u0026rsquo;m using the same hypervisor here for simplicity and consistency.\nCurrently I only have a VM template for Debian 13 but I plan to add a lot more later\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal VMs so I\u0026rsquo;m using the same hypervisor here so I don\u0026rsquo;t have to setup anything new.\nCurrently I only have a VM template for Debian 13 but I plan to add a lot more later\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal VMs so I\u0026rsquo;m using my existing setup for running these.\nCurrently I only have a VM template for Debian 13 but I plan to add a lot more later,\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal VMs so I\u0026rsquo;m using my existing setup for other vms.\nCurrently I only have a VM template for Debian 13 but I plan to add a lot more later,\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for other vms.\nCurrently I only have a VM template for Debian 13 but I plan to add a lot more later,\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I only have a VM template for Debian 13 but I plan to add a lot more later,\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into my home network using a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly .\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, ts gateway gets under 0.2ms to vms)\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, ts gateway gets under 0.2ms to vms)\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nFirewalling off My Stuff ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security ","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking stuff on my home network.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitiagate this I have a Proxmox firewall security group which has a list of rules which deny access to anything on my local network except the router for internet and the tailscale gateway.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitiagate this I have a Proxmox firewall security group with a list of rules which deny access to anything on my local network except the router for internet and the tailscale gateway.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitiagate this I have a Proxmox firewall security group with a list of rules denying access to anything on my local network except the router for internet and the tailscale gateway.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitiagate this I have a Proxmox firewall security group with a list of rules denying access to anything on my local network except the router for internet and ts gateway.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have a Proxmox firewall security group with a list of rules denying access to anything on my local network except the router for internet and ts gateway.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have a Proxmox firewall security group with a list of rules denying access to anything on my local network except the router for internet and ts gateway. Running it on the hypervisor level means that someone can\u0026rsquo;t just remove some firewall rules on their vm, its impossible to remove without access to the pve console\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have a Proxmox firewall security group with a list of rules denying access to anything on my local network except the router for internet and ts gateway. Running it on the hypervisor level means that someone can\u0026rsquo;t just remove some firewall rules on their vm, its impossible to remove without access to the pve console.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group with a list of rules denying access to anything on my local network except the router for internet and ts gateway. Running it on the hypervisor level means that someone can\u0026rsquo;t just remove some firewall rules on their vm, its impossible to remove without access to the pve console.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the proxmox firewall with a list of rules denying access to anything on my local network except the router for internet and ts gateway. Running it on the hypervisor level means that someone can\u0026rsquo;t just remove some firewall rules on their vm, its impossible to remove without access to the pve console.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router for internet and ts gateway. Running it on the hypervisor level means that someone can\u0026rsquo;t just remove some firewall rules on their vm, its impossible to remove without access to the pve console.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router and ts gateway. Running it on the hypervisor level means that someone can\u0026rsquo;t just remove some firewall rules on their vm, its impossible to remove without access to the pve console.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router and ts gateway. Running it on the hypervisor level means that someone can\u0026rsquo;t just remove some firewall rules on their vm, its impossible to remove without access to the pve console.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and ts gateway. Running it on the hypervisor level means that someone can\u0026rsquo;t just remove some firewall rules on their vm, its impossible to remove without access to the pve console.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway. Running it on the hypervisor level means that someone can\u0026rsquo;t just remove some firewall rules on their vm, its impossible to remove without access to the pve console.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (so clients can connect). Running it on the hypervisor level means that someone can\u0026rsquo;t just remove some firewall rules on their vm, its impossible to remove without access to the pve console.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level means that someone can\u0026rsquo;t just remove some firewall rules on their vm, its impossible to remove without access to the pve console.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level adds an extra layer of security because you\u0026rsquo;d need access to the Proxmox control panel.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level adds an extra layer of security because you\u0026rsquo;d need access to the Proxmox control panel which is also firewalled off.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level adds an extra layer of security because you\u0026rsquo;d need access to Proxmox which is also firewalled off.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level adds an extra layer of security because you\u0026rsquo;d need access to Proxmox which is also firewalled off.\nConclusion This setup is still in the early stages of development, I\u0026rsquo;ve been working on it for a couple days so I\u0026rsquo;ll improve over time as I make it more robust and reliable, one of my goals for later on is to add something like high availability or an automated system as most of it is manual right now.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"Mini pcs are perfect home servers"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level adds an extra layer of security because you\u0026rsquo;d need access to Proxmox which is also firewalled off.\nConclusion This setup is still in the early stages of development, I\u0026rsquo;ve been working on it for a couple days so I\u0026rsquo;ll improve over time as I make it more robust and reliable, one of my goals for later on is to add something like high availability or an automated system as most of it is manual right now.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"The perfect home server - Mini PCs"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level adds an extra layer of security because you\u0026rsquo;d need access to Proxmox which is also firewalled off.\nConclusion This setup is still in the early stages of development, I\u0026rsquo;ve been working on it for a couple days so I\u0026rsquo;ll improve over time as I make it more robust and reliable, one of my goals for later on is to add something like high availability or an automated system as most of it is manual right now.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"The perfect home servers - Mini PCs"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level adds an extra layer of security because you\u0026rsquo;d need access to Proxmox which is also firewalled off.\nConclusion This setup is still in the early stages of development, I\u0026rsquo;ve been working on it for a couple days so I\u0026rsquo;ll improve over time as I make it more robust and reliable, one of my goals for later on is to add something like high availability or an automated system as most of it is manual right now.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and a 256 SSD as a secondary node for hosting monitoring services and smaller applications.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and a 256 SSD as a secondary node for hosting monitoring services and smaller applications.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"The perfect home servers - Mini PCs"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level adds an extra layer of security because you\u0026rsquo;d need access to Proxmox which is also firewalled off.\nConclusion This setup is still in the early stages of development, I\u0026rsquo;ve been working on it for a couple days so I\u0026rsquo;ll improve over time as I make it more robust and reliable, one of my goals for later on is to add something like high availability or an automated system as most of it is manual right now.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and a 256 SSD to add to my Proxmox cluster for monitoring and extra capacity.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and a 256 SSD to add to my Proxmox cluster for monitoring and extra capacity.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"The perfect home servers - Mini PCs"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level adds an extra layer of security because you\u0026rsquo;d need access to Proxmox which is also firewalled off.\nConclusion This setup is still in the early stages of development, I\u0026rsquo;ve been working on it for a couple days so I\u0026rsquo;ll improve over time as I make it more robust and reliable, one of my goals for later on is to add something like high availability or an automated system as most of it is manual right now.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and a 256 NVMe SSD to add to my Proxmox cluster for monitoring and extra capacity.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and a 256 NVMe SSD to add to my Proxmox cluster for monitoring and extra capacity.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"The perfect home servers - Mini PCs"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level adds an extra layer of security because you\u0026rsquo;d need access to Proxmox which is also firewalled off.\nConclusion This setup is still in the early stages of development, I\u0026rsquo;ve been working on it for a couple days so I\u0026rsquo;ll improve over time as I make it more robust and reliable, one of my goals for later on is to add something like high availability or an automated system as most of it is manual right now.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and a 256GB NVMe SSD to add to my Proxmox cluster for monitoring and extra capacity.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and a 256GB NVMe SSD to add to my Proxmox cluster for monitoring and extra capacity.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to (raid).\u003c/p\u003e","title":"The perfect home servers - Mini PCs"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level adds an extra layer of security because you\u0026rsquo;d need access to Proxmox which is also firewalled off.\nConclusion This setup is still in the early stages of development, I\u0026rsquo;ve been working on it for a couple days so I\u0026rsquo;ll improve over time as I make it more robust and reliable, one of my goals for later on is to add something like high availability or an automated system as most of it is manual right now.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and a 256GB NVMe SSD to add to my Proxmox cluster for monitoring and extra capacity.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to.\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q with an i5 7400T, 8GB of ram and a 256GB NVMe SSD to add to my Proxmox cluster for monitoring and extra capacity.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to.\u003c/p\u003e","title":"The perfect home servers - Mini PCs"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level adds an extra layer of security because you\u0026rsquo;d need access to Proxmox which is also firewalled off.\nConclusion This setup is still in the early stages of development, I\u0026rsquo;ve been working on it for a couple days so I\u0026rsquo;ll improve over time as I make it more robust and reliable, one of my goals for later on is to add something like high availability or an automated system as most of it is manual right now.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q off ebay with an i5 7400T, 8GB of ram and a 256GB NVMe SSD to add to my Proxmox cluster for monitoring and extra capacity.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to.\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q off ebay with an i5 7400T, 8GB of ram and a 256GB NVMe SSD to add to my Proxmox cluster for monitoring and extra capacity.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to.\u003c/p\u003e","title":"The perfect home servers - Mini PCs"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level adds an extra layer of security because you\u0026rsquo;d need access to Proxmox which is also firewalled off.\nConclusion This setup is still in the early stages of development, I\u0026rsquo;ve been working on it for a couple days so I\u0026rsquo;ll improve over time as I make it more robust and reliable, one of my goals for later on is to add something like high availability or an automated system as most of it is manual right now.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q off ebay with an i5 7400T, 8GB of ram and a 256GB NVMe SSD to add to my Proxmox cluster.\nThe good and the bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to.\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q off ebay with an i5 7400T, 8GB of ram and a 256GB NVMe SSD to add to my Proxmox cluster.\u003c/p\u003e\n\u003ch3 id=\"the-good-and-the-bad\"\u003eThe good and the bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to.\u003c/p\u003e","title":"The perfect home servers - Mini PCs"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level adds an extra layer of security because you\u0026rsquo;d need access to Proxmox which is also firewalled off.\nConclusion This setup is still in the early stages of development, I\u0026rsquo;ve been working on it for a couple days so I\u0026rsquo;ll improve over time as I make it more robust and reliable, one of my goals for later on is to add something like high availability or an automated system as most of it is manual right now.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q off ebay with an i5 7400T, 8GB of ram and a 256GB NVMe SSD to add to my Proxmox cluster.\nThe good \u0026amp; Bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to.\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q off ebay with an i5 7400T, 8GB of ram and a 256GB NVMe SSD to add to my Proxmox cluster.\u003c/p\u003e\n\u003ch3 id=\"the-good--bad\"\u003eThe good \u0026amp; Bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to.\u003c/p\u003e","title":"The perfect home servers - Mini PCs"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"},{"content":"A lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\nObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\nVM Templates \u0026amp; Operating Systems I already use Proxmox VE for personal vms so I\u0026rsquo;m using my existing setup for this service.\nCurrently I have a vm template for Debian 13 \u0026ldquo;Trixie\u0026rdquo;, which lets me spin up new machines with unattended updates and the setup process already complete.\nNetworking \u0026amp; Public IPs I had to get a bit creative here as residential internet connections don\u0026rsquo;t let you have multiple public ip addresses on your connection.\nTo get around this I run a vps with multiple public ips which has a secure encrypted tunnel back into a tailscale gateway running inside my home network which exposes the vm subnets/network, this setup also means I don\u0026rsquo;t have to install tailscale on any vms.\nIf someone connected to [public_vps_ip]:22 it gets relayed to [private_vm_ip]:22 through the tunnel and it all happens seemlessly.\nThis all happens behind the scenes without any noticeable latency (1-2ms latency between vps and my network, tailscale gateway gets under 0.2ms to vms)\nInternal Network Security Obviously one of the main security risks with running a service like this in my Homelab isn\u0026rsquo;t really external attacks, its vms being breached and then attacking or breaking into stuff on my home network.\nTo mitigate this I have a security group on the Proxmox firewall with a list of rules denying access to anything on my local network except the router (for internet) and tailscale gateway (to expose services). Running it on the hypervisor level adds an extra layer of security because you\u0026rsquo;d need access to Proxmox which is also firewalled off.\nConclusion This setup is still in the early stages of development, I\u0026rsquo;ve been working on it for a couple days so I\u0026rsquo;ll improve over time as I make it more robust and reliable, one of my goals for later on is to add something like high availability or an automated system as most of it is manual right now.\n","permalink":"http://localhost:1313/posts/vps-service/","summary":"\u003cp\u003eA lot of my Homelab typically sits idle, wasting power. So I had the idea of letting other people run their own linux virtual machines on it, kinda like how gcp offers \u0026ldquo;spot\u0026rdquo; vms for much cheaper as it uses excess compute capacity.\u003c/p\u003e\n\u003cp\u003eObviously I can\u0026rsquo;t provide this as a paid service since that comes with a lot of liability and legal documents to protect yourself, so I just offer it as a free service for friends.\u003c/p\u003e","title":"How I host Linux VMs for people in my Homelab"},{"content":"In a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\nSo here are a few free and paid solutions for exposing both web applications and game servers to the internet without port forwarding.\nCloudflare Tunnels This is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\nSome argue that it defeats the point of self-hosting since Cloudflare centralizes the web while the indie webs goal is the opposite, however its a great service for exposing applications for free if your fine with that tradeoff.\nTailscale (w/ an optional VPS) This solution can be either free or paid depending on if you want just yourself to be able to access your services or you want them to be exposed via a domain. You can setup Tailscale on both your devices and the server then securely connect to eachother without exposing anything publicly for completely free.\nIf you want a service to be publicly accessible via a domain, you\u0026rsquo;ll need a remote server with its own public ip address as Tailscale only lets you establish secure connections between devices, not expose things to the internet.\nYou\u0026rsquo;d install Tailscale on your home server and remote server, then on the remote server you install for example caddy and setup a reverse proxy to your home servers Tailscale address, an example config is shown below.\nexample.com {\rreverse_proxy http://100.85.48.32\r} Additionally, you can use this to expose any tcp/udp service, including Game Servers, SSH, (S)FTP and much more which requires forwarding ports from a remote server to your home servers Tailscale address but I don\u0026rsquo;t feel confident explaining how to do that.\nPlayit.gg Arguably the best free service for exposing game servers without port forwarding. The setup includes installing a program which tunnels game server traffic to their global network of relay servers.\nIts super easy to setup, you can watch a video guide here.\nYou can also use it to expose any tcp port with a dedicated IPV4 but Tailscale w/ a VPS or CF Tunnels (for websites) is a better option since playit is primarily for game servers.\n","permalink":"http://localhost:1313/posts/exposing-services/","summary":"\u003cp\u003eIn a perfect world everyone could port forward and use an ISP with DDoS Protection and Static IPs, however we don\u0026rsquo;t live in a perfect world. Many people have to deal with things like CGNAT (no public ip) and annoying ISPs.\u003c/p\u003e\n\u003cp\u003eSo here are a few \u003cstrong\u003efree and paid\u003c/strong\u003e solutions for exposing both web applications and game servers to the internet without port forwarding.\u003c/p\u003e\n\u003ch2 id=\"cloudflare-tunnels\"\u003e\u003ca href=\"https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/\"\u003eCloudflare Tunnels\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a completely free service which supports exposing only web applications to the internet using an application (cloudflared) running on your server which tunnels traffic out and exposes it via the Cloudflare Network\u003c/p\u003e","title":"Exposing self-hosted applications without a Public IP address"},{"content":"Recently I picked up a $100 Lenovo ThinkCentre M710Q off ebay with an i5 7400T, 8GB of ram and a 256GB NVMe SSD to add to my Proxmox cluster.\nThe good \u0026amp; Bad Mini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\nHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to.\nWhere to buy them I\u0026rsquo;d recommend having a browse on eBay, find a listing with lots available which means they\u0026rsquo;re selling in bulk and make sure its not \u0026ldquo;barebones\u0026rdquo; since then your pretty much just getting a motherboard and case.\nWhy they\u0026rsquo;re such good value Similar to Thinkpads, businesses buy these machines in bulk and then decommision the old ones selling them in bulk for cheap.\n","permalink":"http://localhost:1313/posts/mini-pcs/","summary":"\u003cp\u003eRecently I picked up a $100 Lenovo ThinkCentre M710Q off ebay with an i5 7400T, 8GB of ram and a 256GB NVMe SSD to add to my Proxmox cluster.\u003c/p\u003e\n\u003ch3 id=\"the-good--bad\"\u003eThe good \u0026amp; Bad\u003c/h3\u003e\n\u003cp\u003eMini PCs are built to be small, quiet and power efficient, perfect for a home server. They\u0026rsquo;re also tiny, hence the name meaning they can live pretty much anywhere.\u003c/p\u003e\n\u003cp\u003eHowever, their form factor makes them hard to upgrade for future expandability and hard to add redundant storage to.\u003c/p\u003e","title":"The perfect home servers - Mini PCs"},{"content":"This post is made for debian based linux distros.\nDon\u0026rsquo;t expose ssh, use a VPN This is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\nNon-root account for logins / Disable root login Disabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\nadduser kuma Then add it to the list of sudoers\nusermod -aG sudo kuma Using SSH keys over plaintext passwords SSH Keys are both more convenient and more secure than a regular plaintext password, especially the default one set by your hosting provider.\nGenerate an ssh key using PuttyGen and paste it on a new line in /home/\u0026lt;your_username\u0026gt;/.ssh/authorized_keys.\nUpdating your SSH configuration This process can differ depending on your host, but for most servers the ssh config is located in /etc/ssh/sshd_config, in the file you want to change the following values.\nPasswordAuthentication no PubkeyAuthentication yes PermitRootLogin no Changing these config values will\nDisable password authentication Allow you to login using ssh keys (Which I showed how to setup above) Disable root login (Applying the steps from before) Run the command below to apply the motifications\nsudo systemctl restart ssh NTFY notifcations on ssh login Adding these lines to your /etc/profile file will send a request to your chosen ntfy server when any user logs in via ssh\nif [ -n \u0026#34;$SSH_CLIENT\u0026#34; ]; then\rNTFY=\u0026#34;${USER}@$(hostname -f) from $(echo $SSH_CLIENT|awk \u0026#39;{print $1}\u0026#39;)\u0026#34;\rcurl -u :\u0026lt;ntfy_api_key\u0026gt; -s -H \u0026#34;Title: SSH Login\u0026#34; -d \u0026#34;$NTFY\u0026#34; -L \u0026#34;https://ntfy.exaple.com/ssh\u0026#34; \u0026gt; /dev/null\rfi Modify to add your own api key and change the url to your ntfy server\nYou can also find an example on the ntfy docs here (Didn\u0026rsquo;t work for me)\n","permalink":"http://localhost:1313/posts/securing-server/","summary":"\u003cp\u003eThis post is made for debian based linux distros.\u003c/p\u003e\n\u003ch3 id=\"dont-expose-ssh-use-a-vpn\"\u003eDon\u0026rsquo;t expose ssh, use a VPN\u003c/h3\u003e\n\u003cp\u003eThis is obviously not viable for stuff running in the cloud but for a homelab server its advised to not expose ssh or management ports, if you need external access use a free VPN service like Tailscale or self-hosted Wireguard.\u003c/p\u003e\n\u003ch3 id=\"non-root-account-for-logins--disable-root-login\"\u003eNon-root account for logins / Disable root login\u003c/h3\u003e\n\u003cp\u003eDisabling the ability to login as root helps with many automated bots that brute-force ssh into your server, start by making a new user with any username you want\u003c/p\u003e","title":"Securing ssh on your Linux Server"},{"content":"This setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\nCompute Nodes Name CPU RAM Storage Lightsail AMD Ryzen 5 5500 32GB DDR4 1TB SSD Railway Intel Core i5-7400T 8GB DDR4 256GB SSD Additional Info Both are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\n","permalink":"http://localhost:1313/homelab/","summary":"\u003cp\u003eThis setup hosts all of my core infrastructure which consists of several linux virtual machines and a couple lxc containers. Physical nodes run Proxmox VE (clustered)\u003c/p\u003e\n\u003ch3 id=\"compute-nodes\"\u003eCompute Nodes\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eName\u003c/th\u003e\n          \u003cth\u003eCPU\u003c/th\u003e\n          \u003cth\u003eRAM\u003c/th\u003e\n          \u003cth\u003eStorage\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLightsail\u003c/td\u003e\n          \u003ctd\u003eAMD Ryzen 5 5500\u003c/td\u003e\n          \u003ctd\u003e32GB DDR4\u003c/td\u003e\n          \u003ctd\u003e1TB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eRailway\u003c/td\u003e\n          \u003ctd\u003eIntel Core i5-7400T\u003c/td\u003e\n          \u003ctd\u003e8GB DDR4\u003c/td\u003e\n          \u003ctd\u003e256GB SSD\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"additional-info\"\u003eAdditional Info\u003c/h3\u003e\n\u003cp\u003eBoth are connected to the Internet via a shared fibre line with gsl ddos protection, systems are monitored with hetrixtools (moving to on-prem prometheus soon).\u003c/p\u003e","title":"Homelab"},{"content":"Systems \u0026amp; Virtualization Build and configured custom pcs (Desktops and Servers) Windows 10/11 Installation and setup Experienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization Docker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora) Troubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux) Networking Home network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs) Knowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP Setup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels) Linux Operated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS) Familiar with the command line and various package managers (apt, dnf) Daily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE) Familar with general system security (SSH Keys, Fail2Ban, No root login, UFW) Web, Cloud \u0026amp; DevOps Tools Reverse web proxy setup \u0026amp; configuration (Nginx, Caddy) Website deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js) Domain/DNS management (Cloudflare \u0026amp; Namecheap) Experience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx) Maintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP) Programming \u0026amp; Databases Intermediate skills with Python, HTML \u0026amp; CSS Basic knowledge of JavaScript/NodeJS Experience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects ","permalink":"http://localhost:1313/skills/","summary":"\u003ch2 id=\"systems--virtualization\"\u003eSystems \u0026amp; Virtualization\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild and configured custom pcs (Desktops and Servers)\u003c/li\u003e\n\u003cli\u003eWindows 10/11 Installation and setup\u003c/li\u003e\n\u003cli\u003eExperienced with Proxmox VE (Type 1) and Virtualbox (Type 2) virtualization\u003c/li\u003e\n\u003cli\u003eDocker Container deployment and management on Windows and Multiple linux distros (Ubuntu, Debian, Fedora)\u003c/li\u003e\n\u003cli\u003eTroubleshooted dozens of issues with desktop machines and servers (Windows \u0026amp; Linux)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eHome network design and troubleshooting (vLANS, Static IPs, Port Forwarding, Wireless APs)\u003c/li\u003e\n\u003cli\u003eKnowledge of IP Addresses (Public \u0026amp; Private), NAT, Ports, DNS, Routers/Modems, Firewalls, TCP/UDP\u003c/li\u003e\n\u003cli\u003eSetup VPNs/Secure Remote Access (Tailscale, Self-hosted Wireguard) and secure tunnels (Cloudflare Tunnels)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linux\"\u003eLinux\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eOperated dozens of servers (Bare Metal, VMs and VPSes) running various linux distros (Ubuntu LTS, Debian, Fedora Server, CoreOS)\u003c/li\u003e\n\u003cli\u003eFamiliar with the command line and various package managers (apt, dnf)\u003c/li\u003e\n\u003cli\u003eDaily drove multiple desktop versions of Linux (Ubuntu, Mint, Bazzite, Fedora KDE)\u003c/li\u003e\n\u003cli\u003eFamilar with general system security (SSH Keys, Fail2Ban, No root login, UFW)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"web-cloud--devops-tools\"\u003eWeb, Cloud \u0026amp; DevOps Tools\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eReverse web proxy setup \u0026amp; configuration (Nginx, Caddy)\u003c/li\u003e\n\u003cli\u003eWebsite deployment using Cloudflare/GitHub pages (Static sites) and Docker Containers (Flask, FastAPI, Express.js)\u003c/li\u003e\n\u003cli\u003eDomain/DNS management (Cloudflare \u0026amp; Namecheap)\u003c/li\u003e\n\u003cli\u003eExperience with Wordpress on both shared hosting (cPanel) and Self-hosted/VPS (Docker \u0026amp; Caddy/Nginx)\u003c/li\u003e\n\u003cli\u003eMaintained lots of vps servers on various cloud platforms (BinaryLane, DigitalOcean, Linode, AWS Lightsail \u0026amp; GCP)\u003c/li\u003e\n\u003cli\u003eProgramming \u0026amp; Databases\u003c/li\u003e\n\u003cli\u003eIntermediate skills with Python, HTML \u0026amp; CSS\u003c/li\u003e\n\u003cli\u003eBasic knowledge of JavaScript/NodeJS\u003c/li\u003e\n\u003cli\u003eExperience operating MariaDB and MongoDB servers for self-hosted services \u0026amp; small projects\u003c/li\u003e\n\u003c/ul\u003e","title":"My Skills"}]